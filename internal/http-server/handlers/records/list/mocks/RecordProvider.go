// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/karmaplush/simple-diet-tracker/internal/domain/models"

	time "time"
)

// RecordProvider is an autogenerated mock type for the RecordProvider type
type RecordProvider struct {
	mock.Mock
}

// GetRecordsForCurrentUser provides a mock function with given fields: ctx, date
func (_m *RecordProvider) GetRecordsForCurrentUser(ctx context.Context, date time.Time) ([]models.Record, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordsForCurrentUser")
	}

	var r0 []models.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]models.Record, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []models.Record); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecordProvider creates a new instance of RecordProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecordProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecordProvider {
	mock := &RecordProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
